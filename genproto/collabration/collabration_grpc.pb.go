// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: proto/collabration.proto

package genproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	CollaborationService_CreateCollaboration_FullMethodName = "/collaboration.CollaborationService/CreateCollaboration"
	CollaborationService_GetCollaboration_FullMethodName    = "/collaboration.CollaborationService/GetCollaboration"
	CollaborationService_UpdateCollaboration_FullMethodName = "/collaboration.CollaborationService/UpdateCollaboration"
	CollaborationService_DeleteCollaboration_FullMethodName = "/collaboration.CollaborationService/DeleteCollaboration"
	CollaborationService_CreateInvitation_FullMethodName    = "/collaboration.CollaborationService/CreateInvitation"
	CollaborationService_GetInvitation_FullMethodName       = "/collaboration.CollaborationService/GetInvitation"
	CollaborationService_UpdateInvitation_FullMethodName    = "/collaboration.CollaborationService/UpdateInvitation"
	CollaborationService_DeleteInvitation_FullMethodName    = "/collaboration.CollaborationService/DeleteInvitation"
	CollaborationService_CreateComment_FullMethodName       = "/collaboration.CollaborationService/CreateComment"
	CollaborationService_GetComment_FullMethodName          = "/collaboration.CollaborationService/GetComment"
	CollaborationService_UpdateComment_FullMethodName       = "/collaboration.CollaborationService/UpdateComment"
	CollaborationService_DeleteComment_FullMethodName       = "/collaboration.CollaborationService/DeleteComment"
)

// CollaborationServiceClient is the client API for CollaborationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CollaborationServiceClient interface {
	CreateCollaboration(ctx context.Context, in *Collaboration, opts ...grpc.CallOption) (*Collaboration, error)
	GetCollaboration(ctx context.Context, in *GetCollaborationRequest, opts ...grpc.CallOption) (*Collaboration, error)
	UpdateCollaboration(ctx context.Context, in *Collaboration, opts ...grpc.CallOption) (*Collaboration, error)
	DeleteCollaboration(ctx context.Context, in *DeleteCollaborationRequest, opts ...grpc.CallOption) (*DeleteCollaborationResponse, error)
	CreateInvitation(ctx context.Context, in *Invitation, opts ...grpc.CallOption) (*Invitation, error)
	GetInvitation(ctx context.Context, in *GetInvitationRequest, opts ...grpc.CallOption) (*Invitation, error)
	UpdateInvitation(ctx context.Context, in *Invitation, opts ...grpc.CallOption) (*Invitation, error)
	DeleteInvitation(ctx context.Context, in *DeleteInvitationRequest, opts ...grpc.CallOption) (*DeleteInvitationResponse, error)
	CreateComment(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*Comment, error)
	GetComment(ctx context.Context, in *GetCommentRequest, opts ...grpc.CallOption) (*Comment, error)
	UpdateComment(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*Comment, error)
	DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentResponse, error)
}

type collaborationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCollaborationServiceClient(cc grpc.ClientConnInterface) CollaborationServiceClient {
	return &collaborationServiceClient{cc}
}

func (c *collaborationServiceClient) CreateCollaboration(ctx context.Context, in *Collaboration, opts ...grpc.CallOption) (*Collaboration, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Collaboration)
	err := c.cc.Invoke(ctx, CollaborationService_CreateCollaboration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationServiceClient) GetCollaboration(ctx context.Context, in *GetCollaborationRequest, opts ...grpc.CallOption) (*Collaboration, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Collaboration)
	err := c.cc.Invoke(ctx, CollaborationService_GetCollaboration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationServiceClient) UpdateCollaboration(ctx context.Context, in *Collaboration, opts ...grpc.CallOption) (*Collaboration, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Collaboration)
	err := c.cc.Invoke(ctx, CollaborationService_UpdateCollaboration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationServiceClient) DeleteCollaboration(ctx context.Context, in *DeleteCollaborationRequest, opts ...grpc.CallOption) (*DeleteCollaborationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCollaborationResponse)
	err := c.cc.Invoke(ctx, CollaborationService_DeleteCollaboration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationServiceClient) CreateInvitation(ctx context.Context, in *Invitation, opts ...grpc.CallOption) (*Invitation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Invitation)
	err := c.cc.Invoke(ctx, CollaborationService_CreateInvitation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationServiceClient) GetInvitation(ctx context.Context, in *GetInvitationRequest, opts ...grpc.CallOption) (*Invitation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Invitation)
	err := c.cc.Invoke(ctx, CollaborationService_GetInvitation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationServiceClient) UpdateInvitation(ctx context.Context, in *Invitation, opts ...grpc.CallOption) (*Invitation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Invitation)
	err := c.cc.Invoke(ctx, CollaborationService_UpdateInvitation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationServiceClient) DeleteInvitation(ctx context.Context, in *DeleteInvitationRequest, opts ...grpc.CallOption) (*DeleteInvitationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteInvitationResponse)
	err := c.cc.Invoke(ctx, CollaborationService_DeleteInvitation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationServiceClient) CreateComment(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*Comment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Comment)
	err := c.cc.Invoke(ctx, CollaborationService_CreateComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationServiceClient) GetComment(ctx context.Context, in *GetCommentRequest, opts ...grpc.CallOption) (*Comment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Comment)
	err := c.cc.Invoke(ctx, CollaborationService_GetComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationServiceClient) UpdateComment(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*Comment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Comment)
	err := c.cc.Invoke(ctx, CollaborationService_UpdateComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationServiceClient) DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCommentResponse)
	err := c.cc.Invoke(ctx, CollaborationService_DeleteComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollaborationServiceServer is the server API for CollaborationService service.
// All implementations must embed UnimplementedCollaborationServiceServer
// for forward compatibility
type CollaborationServiceServer interface {
	CreateCollaboration(context.Context, *Collaboration) (*Collaboration, error)
	GetCollaboration(context.Context, *GetCollaborationRequest) (*Collaboration, error)
	UpdateCollaboration(context.Context, *Collaboration) (*Collaboration, error)
	DeleteCollaboration(context.Context, *DeleteCollaborationRequest) (*DeleteCollaborationResponse, error)
	CreateInvitation(context.Context, *Invitation) (*Invitation, error)
	GetInvitation(context.Context, *GetInvitationRequest) (*Invitation, error)
	UpdateInvitation(context.Context, *Invitation) (*Invitation, error)
	DeleteInvitation(context.Context, *DeleteInvitationRequest) (*DeleteInvitationResponse, error)
	CreateComment(context.Context, *Comment) (*Comment, error)
	GetComment(context.Context, *GetCommentRequest) (*Comment, error)
	UpdateComment(context.Context, *Comment) (*Comment, error)
	DeleteComment(context.Context, *DeleteCommentRequest) (*DeleteCommentResponse, error)
	mustEmbedUnimplementedCollaborationServiceServer()
}

// UnimplementedCollaborationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCollaborationServiceServer struct {
}

func (UnimplementedCollaborationServiceServer) CreateCollaboration(context.Context, *Collaboration) (*Collaboration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCollaboration not implemented")
}
func (UnimplementedCollaborationServiceServer) GetCollaboration(context.Context, *GetCollaborationRequest) (*Collaboration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollaboration not implemented")
}
func (UnimplementedCollaborationServiceServer) UpdateCollaboration(context.Context, *Collaboration) (*Collaboration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCollaboration not implemented")
}
func (UnimplementedCollaborationServiceServer) DeleteCollaboration(context.Context, *DeleteCollaborationRequest) (*DeleteCollaborationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCollaboration not implemented")
}
func (UnimplementedCollaborationServiceServer) CreateInvitation(context.Context, *Invitation) (*Invitation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvitation not implemented")
}
func (UnimplementedCollaborationServiceServer) GetInvitation(context.Context, *GetInvitationRequest) (*Invitation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvitation not implemented")
}
func (UnimplementedCollaborationServiceServer) UpdateInvitation(context.Context, *Invitation) (*Invitation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInvitation not implemented")
}
func (UnimplementedCollaborationServiceServer) DeleteInvitation(context.Context, *DeleteInvitationRequest) (*DeleteInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInvitation not implemented")
}
func (UnimplementedCollaborationServiceServer) CreateComment(context.Context, *Comment) (*Comment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (UnimplementedCollaborationServiceServer) GetComment(context.Context, *GetCommentRequest) (*Comment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComment not implemented")
}
func (UnimplementedCollaborationServiceServer) UpdateComment(context.Context, *Comment) (*Comment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateComment not implemented")
}
func (UnimplementedCollaborationServiceServer) DeleteComment(context.Context, *DeleteCommentRequest) (*DeleteCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedCollaborationServiceServer) mustEmbedUnimplementedCollaborationServiceServer() {}

// UnsafeCollaborationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollaborationServiceServer will
// result in compilation errors.
type UnsafeCollaborationServiceServer interface {
	mustEmbedUnimplementedCollaborationServiceServer()
}

func RegisterCollaborationServiceServer(s grpc.ServiceRegistrar, srv CollaborationServiceServer) {
	s.RegisterService(&CollaborationService_ServiceDesc, srv)
}

func _CollaborationService_CreateCollaboration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Collaboration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationServiceServer).CreateCollaboration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollaborationService_CreateCollaboration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationServiceServer).CreateCollaboration(ctx, req.(*Collaboration))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaborationService_GetCollaboration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollaborationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationServiceServer).GetCollaboration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollaborationService_GetCollaboration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationServiceServer).GetCollaboration(ctx, req.(*GetCollaborationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaborationService_UpdateCollaboration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Collaboration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationServiceServer).UpdateCollaboration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollaborationService_UpdateCollaboration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationServiceServer).UpdateCollaboration(ctx, req.(*Collaboration))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaborationService_DeleteCollaboration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCollaborationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationServiceServer).DeleteCollaboration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollaborationService_DeleteCollaboration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationServiceServer).DeleteCollaboration(ctx, req.(*DeleteCollaborationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaborationService_CreateInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Invitation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationServiceServer).CreateInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollaborationService_CreateInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationServiceServer).CreateInvitation(ctx, req.(*Invitation))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaborationService_GetInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationServiceServer).GetInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollaborationService_GetInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationServiceServer).GetInvitation(ctx, req.(*GetInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaborationService_UpdateInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Invitation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationServiceServer).UpdateInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollaborationService_UpdateInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationServiceServer).UpdateInvitation(ctx, req.(*Invitation))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaborationService_DeleteInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationServiceServer).DeleteInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollaborationService_DeleteInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationServiceServer).DeleteInvitation(ctx, req.(*DeleteInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaborationService_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Comment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationServiceServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollaborationService_CreateComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationServiceServer).CreateComment(ctx, req.(*Comment))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaborationService_GetComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationServiceServer).GetComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollaborationService_GetComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationServiceServer).GetComment(ctx, req.(*GetCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaborationService_UpdateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Comment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationServiceServer).UpdateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollaborationService_UpdateComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationServiceServer).UpdateComment(ctx, req.(*Comment))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaborationService_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationServiceServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollaborationService_DeleteComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationServiceServer).DeleteComment(ctx, req.(*DeleteCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CollaborationService_ServiceDesc is the grpc.ServiceDesc for CollaborationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CollaborationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "collaboration.CollaborationService",
	HandlerType: (*CollaborationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCollaboration",
			Handler:    _CollaborationService_CreateCollaboration_Handler,
		},
		{
			MethodName: "GetCollaboration",
			Handler:    _CollaborationService_GetCollaboration_Handler,
		},
		{
			MethodName: "UpdateCollaboration",
			Handler:    _CollaborationService_UpdateCollaboration_Handler,
		},
		{
			MethodName: "DeleteCollaboration",
			Handler:    _CollaborationService_DeleteCollaboration_Handler,
		},
		{
			MethodName: "CreateInvitation",
			Handler:    _CollaborationService_CreateInvitation_Handler,
		},
		{
			MethodName: "GetInvitation",
			Handler:    _CollaborationService_GetInvitation_Handler,
		},
		{
			MethodName: "UpdateInvitation",
			Handler:    _CollaborationService_UpdateInvitation_Handler,
		},
		{
			MethodName: "DeleteInvitation",
			Handler:    _CollaborationService_DeleteInvitation_Handler,
		},
		{
			MethodName: "CreateComment",
			Handler:    _CollaborationService_CreateComment_Handler,
		},
		{
			MethodName: "GetComment",
			Handler:    _CollaborationService_GetComment_Handler,
		},
		{
			MethodName: "UpdateComment",
			Handler:    _CollaborationService_UpdateComment_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _CollaborationService_DeleteComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/collabration.proto",
}
